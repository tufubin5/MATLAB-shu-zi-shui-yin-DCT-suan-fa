
1  基于DCT变换仿真

1.1  算法原理

离散余弦变换（Diserete Cosine Transform）简称DCT变换。离散余弦变换是傅立叶变换的一种特殊情况，在傅立叶级数展开式中，如果被展开的函数是实偶函数，那么其傅立叶级数中只包含余弦项，再将其离散化可导出离散余弦变换，因此余弦变换与傅里叶变换一样有明确的物理意义，DCT变换避免了傅里叶变换中的复数运算，它是基于实数的正交变换。
DCT变换域数字水印算法的基本原理是将空域图像变成频域，然后将水印信息嵌入其直流项之中，最后将频域转换成空域以完成图片的水印的嵌入。其主要思想是：在DCT变换域上选择中、低频系数叠加水印信息，因为人眼的感觉主要集中在中、低频段，攻击者破坏水印时，不可避免地会引起图像质量的严重下降，而且一般的图像处理也不会改变这部分数据。再者，由于JPEG、MPEG等压缩算法的核心是在DCT变换域上进行量化，故通过巧妙的融合水印和量化过程，可以使水印抵御一定的有损压缩。此外，DCT变换域系数的统计分布有比较好的数学模型，可以从理论上估计水印的信息量。基于DCT变换的数字水印在逆变换时会散布在整个图像空间中，故水印不像空间域技术那样易受到裁剪、低通滤波等攻击的影响，具有鲁棒性高、隐蔽性好的特点。

1.1.1  准备工作

首先要读入一幅待嵌入的原始图片I=f1(x,y)以及一幅水印图M=f2(x,y)。由于DCT法需要给原图像进行8*8分块，所以为了便于将一个二进制序列作为水印放入DCT，最好让原图像的行x与列y象素数可以被8整除。如果不能整除需要将x/8与y/8的结果进行取整，其取法遵循向下取整原则。在整除的情况下，对于水印图像，它的行宽不得大于x/8列长不得大于y/8。取x和y均为256即256*256象素，水印图为32*32象素。由此可以看到，整个原图可以划分为x*y/64=1024个变换块如图4.1。


图1.1 划分变换块

每个块的位置计为（m,n），那么所取的水印图像的每一个象素点可以对应一个变换块进行嵌入。

1.1.2  选取8*8变换块

下面将原图像的每个8*8块分别作DCT变换，在此之前我们需要知道每个块中所包含象素点的坐标。通过图4.1我们不难总结出规律，即：所取（m,n）快中的左上点的行坐标为x=(m-1)*8+1而左上点的列坐标为y=(n-1)*8+1如图4.2。

图1.2 像素点坐标
由此又可推出该块中所有象素点的坐标，用MATLAB的语句来表示可以写成block_dct1=I(x:x+block-1,y:y+block-1)，这样block_dct1矩阵用来表示该块所有象素的值。之后对该块进行DCT变换，从而将空域图像8*8块矩阵变为频域8*8块矩阵。

1.1.3  DCT变换与嵌入

首先，要检测变换块是否含有边界，可以将边界图像与原图相对应位置的象素块提出，将块中所有象素的值（只含0，1）求和的方法检测它是否含有边界，不妨设置一个阈值等于3，即该块中含有三个或以上的边界点就认为该块含有较多的边界信息，通过边界自适应的原理应当将较大的强度值嵌入。
然后，需要将每一个8*8块进行DCT变换，并将变换后的直流分量与强度值和水印图像相应点象素的信息相乘。在这里需要指出的是为了保证提取算法的简单可以令水印图像象素的值减一个比较小的值。
这一步用MATLAB来实现可以用block_dct1=dct2(block_dct1)分别将8*8块进行二维DCT变换，block_dct1(1,1)=block_dct1(1,1)*（1+Alpha*(mark(m,n)-0.1)）其中的mark表示水印图像的象素值，将它嵌入块的直流项中。

1.1.4  恢复空域

将嵌入后的块分别进行反DCT变换，并且按顺序存回I矩阵，这时的I就是嵌入水印后的图像。

1.2  水印的提取

这里的水印提取方法可以看作是嵌入的反变换，由于在频域的8*8块的直流量中乘上了与水印信息有关的系数，那么同样我们可以通过原图像与水印图像8*8块直流分量的值相除得到的商即是与水印图像相关的值，由于嵌入时水印图像值只含0、1，而且我们在这个值得后面又减了一个小的常数，因此将除得的商减去1记为cc，这样就可以在嵌入的水印值为0的时候cc<0，反之在嵌入的水印值为1的时候cc>0。这样就可以绘制出水印图像。

1.3  仿真程序

clear all; %%%清理变量
clc;
start_time=cputime; %开始计算时间
%%%%%%%%%%%% 读取水印图像 %%%%%%%%
I=imread('水印.bmp'); %读取图像，水印图像
I=rgb2gray(I); %变为灰度图像
I=double(I)/255;  %转双精度
I=ceil(I);
%%%%%%%%%%显示水印图像%%%%%%%%%%%%%
figure(1);
subplot(2,3,1);%%生成2行3列的figure，显示在第一个
imshow(I),title('水印图像') %显示图像
dimI=size(I); %获取水印图像的长宽
rm=dimI(1);cm=dimI(2); %多少行和多少列
%%%%%%%%%读取载体图像%%%%%%%%%%%%%
a0=imread('载体.bmp');%载体图像
psnr_cover=double(a0);%转双精度
%%%%%%%%%显示载体图像%%%%%%%%%%%%%
subplot(2,3,2);%开辟一个2行3列的figure
imshow(a0,[]);%显示
title('载体图像');%标题
%%%%%以下生成水印信息 %%
cda0=blkproc(a0,[8,8],'dct2'); %将水印分成8*8的矩阵块
mark=I;
alpha=10;
k1=randn(1,8);
k2=randn(1,8);
[r,c]=size(a0);
%%%%%%%%嵌入水印到载体里面 %%%%%%%%%%
cda1=cda0;   % cda1 = 256_256
for i=1:rm  % i=1:32行
    for j=1:cm  % j=1:32列取个处理像素
        x=(i-1)*8;y=(j-1)*8;%做相应像素值的处理
        if mark(i,j)==1
            k=k1;
        else
            k=k2;
        End
%%%水印嵌入过程
        cda1(x+1,y+8)=cda0(x+1,y+8)+alpha*k(1);
        cda1(x+2,y+7)=cda0(x+2,y+7)+alpha*k(2);
        cda1(x+3,y+6)=cda0(x+3,y+6)+alpha*k(3);
        cda1(x+4,y+5)=cda0(x+4,y+5)+alpha*k(4);
        cda1(x+5,y+4)=cda0(x+5,y+4)+alpha*k(5);
        cda1(x+6,y+3)=cda0(x+6,y+3)+alpha*k(6);
        cda1(x+7,y+2)=cda0(x+7,y+2)+alpha*k(7);
        cda1(x+8,y+1)=cda0(x+8,y+1)+alpha*k(8);
    end
end
%%%%% 嵌入水印后图像 %%%%%%%%%%%%%%
a1=blkproc(cda1,[8,8],'idct2');
a_1=uint8(a1);
imwrite(a_1,'嵌入水印后的图.bmp','bmp');%%保存嵌入了水印的图像
subplot(2,3,3),imshow(a1,[]),title('嵌入水印后的图像');
disp('嵌入水印处理时间')
p0=a_1;
embed_time=cputime-start_time  %计算时间结束
%%%%%% 攻击实验 测试鲁棒性 %%%%%%%%%%%
start_time=cputime
watermark=a1;
noise0=1*randn(size(watermark));
watermark=watermark+noise0;
subplot(2,3,4);
imshow(watermark,[]);
title('加入白噪声后图像');
M1=watermark;
M_1=uint8(M1);
imwrite(M_1,'白噪声攻击图.bmp','bmp');

%%%%%%%%   提取水印  %%%%%
psnr_watermarked=double(M1);
dca1=blkproc(M1,[8,8],'dct2');
p=zeros(1,8);
for i=1:dimI(1)  %行
    for j=1:dimI(2)  % j=1:32列
        x=(i-1)*8;y=(j-1)*8;
        p(1)=dca1(x+1,y+8);
        p(2)=dca1(x+2,y+7);
        p(3)=dca1(x+3,y+6);
        p(4)=dca1(x+4,y+5);
        p(5)=dca1(x+5,y+4);
        p(6)=dca1(x+6,y+3);
        p(7)=dca1(x+7,y+2);
        p(8)=dca1(x+8,y+1);
        if corr2(p,k1)>corr2(p,k2),warning off MATLAB:divideByZero;
            mark1(i,j)=1;
        else
            mark1(i,j)=0;
        end
    end
end

subplot(2,3,5);%开辟2行3列figure显示在第五个
imshow(mark1,[]),title('提取的水印图像'); %显示图像
subplot(2,3,6);
imwrite(mark1,'提取到的水印.bmp','bmp');
imshow(mark),title('原嵌入水印比较');
%%%% time %%%%%%%
disp('攻击与提取处理时间')
attack_recover_time=cputime-start_time
%%%%%%% Oringinal mark and mark test %%%%%%%%%%
disp('原水印图像与提取水印图像互相关系数')
NC=nc(mark1,mark)  %调用nc.m子函数

2  结果分析

图2.1 运行图
原始图像与嵌入水印后的图像仅有微小的差别，人眼基本分辨不出两图像的任何不同。这说明DCT域水印算法具有较好的不可见性，基本不影响视觉质量，同时也很好的达到了透明性的要求。

图2.2 白噪声攻击后，与原图片对比提取的水印

通过互相关性nc进行评价，计算结果为：nc为0.9849，说明在dct方法中，对于噪声的攻击，其鲁棒性是比较好的。

                      图2.3 提取水印和原水印的互相关性
实验结果在某方面验证了该算法的有效性、可靠性、抗攻击性、鲁棒性和不可见性，能够为数字媒体信息在防伪、防篡改、认证、保障数据安全和完整性等方面提供有效的技术保障。


